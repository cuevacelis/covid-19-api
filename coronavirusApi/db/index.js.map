{"version":3,"sources":["../../src/db/index.js"],"names":["corona","db","table","getTotal","axios","get","response","status","console","log","total","cases","deaths","recovered","html","$","load","data","numbers","i","length","number","children","text","trim","Object","keys","set","getCountries","headingsNodes","find","rowsNodes","names","Country","TotalCases","NewCases","TotalDeaths","NewDeaths","TotalRecovered","ActiveCases","Serious","matchName","name","headings","countries","push","split","cells","country","o","value","setInterval"],"mappings":"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","sourcesContent":["import db from \"quick.db\";\nimport axios from \"axios\";\nimport $ from \"cheerio\";\n\nconst corona = new db.table(\"corona\");\n\nconst getTotal = async () => {\n  let response;\n\n  try {\n    response = await axios.get(\"https://www.worldometers.info/coronavirus/\");\n    if (response.status !== 200) {\n      console.log(\"ERROR\");\n    }\n  } catch (err) {\n    return null;\n  }\n\n  const total = {\n    cases: null,\n    deaths: null,\n    recovered: null,\n  };\n\n  const html = $.load(response.data);\n  const numbers = html(\".maincounter-number\");\n\n  for (let i = 0; i < numbers.length; i++) {\n    const number = $(numbers[i])\n      .children(\"span\")\n      .text()\n      .trim();\n    total[Object.keys(total)[i]] = number;\n  }\n\n  corona.set(\"total\", total);\n};\n\nconst getCountries = async () => {\n  let response;\n\n  try {\n    response = await axios.get(\"https://www.worldometers.info/coronavirus/\");\n    if (response.status !== 200) {\n      console.log(\"Error\", response.status);\n    }\n  } catch (err) {\n    return null;\n  }\n\n  const html = $.load(response.data);\n  const table = html(\"table#main_table_countries\");\n  const headingsNodes = table.children(\"thead\").find(\"th\");\n  const rowsNodes = table.children(\"tbody\").children(\"tr\");\n  const names = {\n    Country: \"country\",\n    TotalCases: \"total\",\n    NewCases: \"newCases\",\n    TotalDeaths: \"totalDeaths\",\n    NewDeaths: \"newDeaths\",\n    TotalRecovered: \"totalRecovered\",\n    ActiveCases: \"activeCases\",\n    Serious: \"serious\",\n  };\n  const matchName = name => names[name] || name;\n  let headings = [];\n  let countries = [];\n\n  for (let i = 0; i < headingsNodes.length; i++) {\n    headings.push(\n      matchName(\n        $(headingsNodes[i])\n          .text()\n          .split(\",\")[0],\n      ),\n    );\n  }\n\n  for (let i = 0; i < rowsNodes.length - 1; i++) {\n    const cells = $(rowsNodes[i]).children(\"td\");\n    let country = {};\n\n    for (let o = 0; o < cells.length; o++) {\n      const value = $(cells[o])\n        .text()\n        .trim();\n\n      country = {\n        ...country,\n        [headings[o]]: value.length ? value : 0,\n      };\n    }\n\n    countries.push(country);\n  }\n\n  corona.set(\"countries\", countries);\n};\n\nsetInterval(() => {\n  getCountries();\n  getTotal();\n}, 10000);\n\nexport default corona;\n"],"file":"index.js"}